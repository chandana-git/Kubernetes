Learning Objectives:-
Create the `auth-svc` service
Create the `data-svc` service


Problem Statement:-
Your company has just deployed two components of a web application to a Kubernetes cluster, using deployments with multiple replicas. They need a way to provide dynamic network access to these replicas so that there will be uninterrupted access to the components whenever replicas are created, removed, and replaced. One deployment is called auth-deployment, an authentication provider that needs to be accessible from outside the cluster. The other is called data-deployment, and it is a component designed to be accessed only by other pods within the cluster.

The team wants you to create two services to expose these two components:-


Examine the two deployments, and create two services that meet the following criteria:

auth-svc.yaml
--------------

The service name is auth-svc.
The service exposes the pod replicas managed by the deployment named auth-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is NodePort.


data-svc.yaml
----------------
The service name is data-svc.
The service exposes the pod replicas managed by the deployment named data-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is ClusterIP.
Note: All work should be done in the default namespace.
====================================================================
$ nano auth_d.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP

$ kubectl create -f auth_d.yml
deployment.apps/auth-deployment created

#Creating auth_svc for type NodePort
$ nano auth-svc.yml

apiVersion: apps/v1
kind: Service
metadata:
  name: auth-svc
  labels:
   app: auth
spec:
  type: NodePort
  ports:
    - port: 80
      nodePort: 30001
      targetPort: 80
  selector:
    app: auth

$ kubectl create -f auth-svc.yml
service/auth-svc created

$ kubectl get svc
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
auth-svc     NodePort    10.107.97.225   <none>        80:30001/TCP   4m9s
kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP        9m35s

$ curl http://10.107.97.225:80
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
======================================================================================
#Create the `data-svc` service for Type-ClusterIP
vim data-d.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: data
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: data
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP

$ kubectl create -f data-d.yml
deployment.apps/data-deployment created

$ nano data-svc.yml

apiVersion: v1
kind: Service
metadata:
  name: data-svc
  labels:
    app: data
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 80
  selector:
    app: data

$ kubectl create -f data-svc.yml
service/data-svc created
$ kubectl get svc data-svc
NAME       TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
data-svc   ClusterIP   10.99.201.193   <none>        8080/TCP   7s

$ curl http://10.99.201.193:8080
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

List of services 

$ kubectl get svc
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
auth-svc     NodePort    10.107.97.225   <none>        80:30001/TCP   26m
data-svc     ClusterIP   10.99.201.193   <none>        8080/TCP       42s
kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP        32m